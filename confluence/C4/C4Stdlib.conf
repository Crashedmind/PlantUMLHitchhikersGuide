<h2>C4</h2>
<ac:structured-macro ac:name="tip">
<ac:rich-text-body>
<p>This section details PlantUML stdlib support for C4.</p>
<p>See <ac:link ac:anchor="C4LightweightSoftwareArchitectureDescriptionMethod">
<ri:page ri:content-title="C4 Lightweight Software Architecture Description Method" />
<ac:link-body>C4 Lightweight Software Architecture Description Method</ac:link-body>
</ac:link> for details of C4.</p>
</ac:rich-text-body>
</ac:structured-macro>
<div style="margin-left: 30px;padding-top: 10px;">
<p><em>Big design up front is dumb, but doing no design up front is even
dumber.</em> Dave Thomas</p>
</div>
<p>The <a href="https://c4model.com/">C4 Model</a> is a lightweight software
architecture description method. It consists of a set of 4 diagrams that
describe the <strong>static</strong> structure of a software system.</p>
<p>Overall, it strives for clarity and communication of the story, and
follows <a href="http://www.ifp.illinois.edu/nabhcs/abstracts/shneiderman.html">Shneiderman’s
mantra</a>:</p>
<div style="margin-left: 30px;padding-top: 10px;">
<p><em>Overview first, zoom and filter, then details-on-demand</em></p>
</div>
<p>It is not formal UML e.g. the UML actor stickman is deliberately not
used as it causes confusion between a person or a system.</p>
<h2>C4 PlantUML</h2>
<p><a href="https://github.com/RicardoNiepel/C4-PlantUML">C4-PlantUML</a> is included in PlantUML Stdlib. It combines
the benefits of <a href="http://plantuml.com/">PlantUML</a> and the <ac:link ac:anchor="C4LightweightSoftwareArchitectureDescriptionMethod">
<ri:page ri:content-title="C4 Lightweight Software Architecture Description Method" />
<ac:link-body>C4 Lightweight Software Architecture Description Method</ac:link-body>
</ac:link> model for providing a simple way of describing
and communicating software architectures - especially during up-front design sessions - with an intuitive language using open source and platform independent tools.</p>
<p>It also supports <a href="https://github.com/RicardoNiepel/C4-PlantUML#snippets-for-visual-studio-code">C4 PlantUML Snippets for Visual Studio Code</a></p>
<div style="margin-left: 30px;padding-top: 10px;">
<p><a href="https://github.com/plantuml/plantuml-stdlib/tree/master/C4">https://github.com/plantuml/plantuml-stdlib/tree/master/C4</a></p>
</div>
<h2>C4 Example Big Bank</h2>
<ac:structured-macro ac:name="info">
<ac:rich-text-body>
<p>The examples from <a href="https://github.com/RicardoNiepel/C4-PlantUML">C4-PlantUML</a> are used.</p>
<p>Person sprites are added to the customer box to emphasize the user in the diagrams.</p>
</ac:rich-text-body>
</ac:structured-macro>
<h3>Context</h3>
<ac:structured-macro ac:name="info">
<ac:rich-text-body>
<p>The top-level diagram shows the big boxes in the system i.e. the overall context in which a system operates.</p>
<p>The grey boxes are external i.e. not part of the system we’re defining.</p>
</ac:rich-text-body>
</ac:structured-macro>
<ac:structured-macro ac:name="info">
<ac:parameter ac:name="icon">false</ac:parameter>
<ac:rich-text-body>
<ac:image ac:align="center" ac:alt="@startuml
!include &lt;c4/C4_Context.puml&gt;  

&apos;ref http://plantuml.com/stdlib
!include &lt;office/Users/user.puml&gt;
!include &lt;office/Users/mobile_user.puml&gt;

&apos;LAYOUT_WITH_LEGEND

title System Context diagram for Internet Banking System

Person(customer  , Customer , &quot;&lt;$user&gt; &lt;$mobile_user&gt;\n A customer of the bank, with personal bank accounts&quot; )

System(banking_system, &quot;Internet Banking System&quot;, &quot;Allows customers to view information about their bank accounts, and make payments.&quot;)

System_Ext(mail_system, &quot;E-mail system&quot;, &quot;The internal Microsoft Exchange e-mail system.&quot;)
System_Ext(mainframe, &quot;Mainframe Banking System&quot;, &quot;Stores all of the core banking information about customers, accounts, transactions, etc.&quot;)

Rel(customer, banking_system, &quot;Uses&quot;)
Rel_Back(customer, mail_system, &quot;Sends e-mails to&quot;)
Rel_Neighbor(banking_system, mail_system, &quot;Sends e-mails&quot;, &quot;SMTP&quot;)
Rel(banking_system, mainframe, &quot;Uses&quot;)
@enduml
">
<ri:attachment ri:filename="extern_plantuml-50c48432ca0487f37dda95df478551cfe27ef2ec.png"></ri:attachment>
</ac:image></ac:rich-text-body>
</ac:structured-macro>
<ac:structured-macro ac:name="code">
<ac:parameter ac:name="language">python</ac:parameter>
<ac:parameter ac:name="linenumbers">true</ac:parameter>
<ac:plain-text-body><![CDATA[@startuml
!include <c4/C4_Context.puml>  

'ref http://plantuml.com/stdlib
!include <office/Users/user.puml>
!include <office/Users/mobile_user.puml>

'LAYOUT_WITH_LEGEND

title System Context diagram for Internet Banking System

Person(customer  , Customer , "<$user> <$mobile_user>\n A customer of the bank, with personal bank accounts" )

System(banking_system, "Internet Banking System", "Allows customers to view information about their bank accounts, and make payments.")

System_Ext(mail_system, "E-mail system", "The internal Microsoft Exchange e-mail system.")
System_Ext(mainframe, "Mainframe Banking System", "Stores all of the core banking information about customers, accounts, transactions, etc.")

Rel(customer, banking_system, "Uses")
Rel_Back(customer, mail_system, "Sends e-mails to")
Rel_Neighbor(banking_system, mail_system, "Sends e-mails", "SMTP")
Rel(banking_system, mainframe, "Uses")
@enduml]]></ac:plain-text-body>
</ac:structured-macro>
<h3>Context With More detail</h3>
<ac:structured-macro ac:name="info">
<ac:rich-text-body>
<p>More detail is then added.</p>
</ac:rich-text-body>
</ac:structured-macro>
<ac:structured-macro ac:name="info">
<ac:parameter ac:name="icon">false</ac:parameter>
<ac:rich-text-body>
<ac:image ac:align="center" ac:alt="@startuml
!include &lt;c4/C4_Context.puml&gt;  

&apos;ref http://plantuml.com/stdlib
!include &lt;office/Users/user.puml&gt;
!include &lt;office/Users/mobile_user.puml&gt;

&apos;LAYOUT_TOP_DOWN
&apos;LAYOUT_AS_SKETCH()
LAYOUT_WITH_LEGEND()

title System Landscape diagram for Big Bank plc

Person(customer  , Customer , &quot;&lt;$user&gt; &lt;$mobile_user&gt;\n A customer of the bank, with personal bank accounts&quot; )

Enterprise_Boundary(c0, &quot;Big Bank plc&quot;) {
    System(banking_system, &quot;Internet Banking System&quot;, &quot;Allows customers to view information about their bank accounts, and make payments.&quot;)

    System_Ext(atm, &quot;ATM&quot;, &quot;Allows customers to withdraw cash.&quot;)
    System_Ext(mail_system, &quot;E-mail system&quot;, &quot;The internal Microsoft Exchange e-mail system.&quot;)

    System_Ext(mainframe, &quot;Mainframe Banking System&quot;, &quot;Stores all of the core banking information about customers, accounts, transactions, etc.&quot;)

    Person_Ext(customer_service, &quot;Customer Service Staff&quot;, &quot;Customer service staff within the bank.&quot;)
    Person_Ext(back_office, &quot;Back Office Staff&quot;, &quot;Administration and support staff within the bank.&quot;)
}

Rel_Neighbor(customer, banking_system, &quot;Uses&quot;)
Rel_R(customer, atm, &quot;Withdraws cash using&quot;)
Rel_Back(customer, mail_system, &quot;Sends e-mails to&quot;)

Rel_R(customer, customer_service, &quot;Asks questions to&quot;, &quot;Telephone&quot;)

Rel_D(banking_system, mail_system, &quot;Sends e-mail using&quot;)
Rel_R(atm, mainframe, &quot;Uses&quot;)
Rel_R(banking_system, mainframe, &quot;Uses&quot;)
Rel_D(customer_service, mainframe, &quot;Uses&quot;)
Rel_U(back_office, mainframe, &quot;Uses&quot;)

Lay_D(atm, banking_system)

Lay_D(atm, customer)
Lay_U(mail_system, customer)
@enduml
">
<ri:attachment ri:filename="extern_plantuml-3fefedb88f3289913cd9dfaa5bf2b04d52c8ac89.png"></ri:attachment>
</ac:image></ac:rich-text-body>
</ac:structured-macro>
<ac:structured-macro ac:name="code">
<ac:parameter ac:name="language">python</ac:parameter>
<ac:parameter ac:name="linenumbers">true</ac:parameter>
<ac:plain-text-body><![CDATA[@startuml
!include <c4/C4_Context.puml>  

'ref http://plantuml.com/stdlib
!include <office/Users/user.puml>
!include <office/Users/mobile_user.puml>

'LAYOUT_TOP_DOWN
'LAYOUT_AS_SKETCH()
LAYOUT_WITH_LEGEND()

title System Landscape diagram for Big Bank plc

Person(customer  , Customer , "<$user> <$mobile_user>\n A customer of the bank, with personal bank accounts" )

Enterprise_Boundary(c0, "Big Bank plc") {
    System(banking_system, "Internet Banking System", "Allows customers to view information about their bank accounts, and make payments.")

    System_Ext(atm, "ATM", "Allows customers to withdraw cash.")
    System_Ext(mail_system, "E-mail system", "The internal Microsoft Exchange e-mail system.")

    System_Ext(mainframe, "Mainframe Banking System", "Stores all of the core banking information about customers, accounts, transactions, etc.")

    Person_Ext(customer_service, "Customer Service Staff", "Customer service staff within the bank.")
    Person_Ext(back_office, "Back Office Staff", "Administration and support staff within the bank.")
}

Rel_Neighbor(customer, banking_system, "Uses")
Rel_R(customer, atm, "Withdraws cash using")
Rel_Back(customer, mail_system, "Sends e-mails to")

Rel_R(customer, customer_service, "Asks questions to", "Telephone")

Rel_D(banking_system, mail_system, "Sends e-mail using")
Rel_R(atm, mainframe, "Uses")
Rel_R(banking_system, mainframe, "Uses")
Rel_D(customer_service, mainframe, "Uses")
Rel_U(back_office, mainframe, "Uses")

Lay_D(atm, banking_system)

Lay_D(atm, customer)
Lay_U(mail_system, customer)
@enduml]]></ac:plain-text-body>
</ac:structured-macro>
<h3>Container</h3>
<ac:structured-macro ac:name="info">
<ac:rich-text-body>
<p>We then drill down into the “Internet Banking” box.</p>
</ac:rich-text-body>
</ac:structured-macro>
<ac:structured-macro ac:name="info">
<ac:parameter ac:name="icon">false</ac:parameter>
<ac:rich-text-body>
<ac:image ac:align="center" ac:alt="@startuml
&apos;!includeurl https://raw.githubusercontent.com/RicardoNiepel/C4-PlantUML/master/C4_Container.puml
!include &lt;c4/C4_Container.puml&gt;  

&apos;ref http://plantuml.com/stdlib
!include &lt;office/Users/user.puml&gt;
!include &lt;office/Users/mobile_user.puml&gt;

LAYOUT_WITH_LEGEND()


title Container diagram for Internet Banking System

Person(customer  , Customer , &quot;&lt;$user&gt; &lt;$mobile_user&gt;\n A customer of the bank, with personal bank accounts&quot; )

System_Boundary(c1, &quot;Internet Banking&quot;) {
    Container(web_app, &quot;Web Application&quot;, &quot;Java, Spring MVC&quot;, &quot;Delivers the static content and the Internet banking SPA&quot;)
    Container(spa, &quot;Single-Page App&quot;, &quot;JavaScript, Angular&quot;, &quot;Provides all the Internet banking functionality to cutomers via their web browser&quot;)
    Container(mobile_app, &quot;Mobile App&quot;, &quot;C#, Xamarin&quot;, &quot;Provides a limited subset of the Internet banking functionality to customers via their mobile device&quot;)
    ContainerDb(database, &quot;Database&quot;, &quot;SQL Database&quot;, &quot;Stores user registraion information, hased auth credentials, access logs, etc.&quot;)
    Container(backend_api, &quot;API Application&quot;, &quot;Java, Docker Container&quot;, &quot;Provides Internet banking functionality via API&quot;)
}

System_Ext(email_system, &quot;E-Mail System&quot;, &quot;The internal Microsoft Exchange system&quot;)
System_Ext(banking_system, &quot;Mainframe Banking System&quot;, &quot;Stores all of the core banking information about customers, accounts, transactions, etc.&quot;)

Rel(customer, web_app, &quot;Uses&quot;, &quot;HTTPS&quot;)
Rel(customer, spa, &quot;Uses&quot;, &quot;HTTPS&quot;)
Rel(customer, mobile_app, &quot;Uses&quot;)

Rel_Neighbor(web_app, spa, &quot;Delivers&quot;)
Rel(spa, backend_api, &quot;Uses&quot;, &quot;async, JSON/HTTPS&quot;)
Rel(mobile_app, backend_api, &quot;Uses&quot;, &quot;async, JSON/HTTPS&quot;)
Rel_Back_Neighbor(database, backend_api, &quot;Reads from and writes to&quot;, &quot;sync, JDBC&quot;)

Rel_Back(customer, email_system, &quot;Sends e-mails to&quot;)
Rel_Back(email_system, backend_api, &quot;Sends e-mails using&quot;, &quot;sync, SMTP&quot;)
Rel_Neighbor(backend_api, banking_system, &quot;Uses&quot;, &quot;sync/async, XML/HTTPS&quot;)


@enduml

">
<ri:attachment ri:filename="extern_plantuml-6c5ab14609c0d2c62a602d34fb4d1156ee8ddac5.png"></ri:attachment>
</ac:image></ac:rich-text-body>
</ac:structured-macro>
<ac:structured-macro ac:name="code">
<ac:parameter ac:name="language">python</ac:parameter>
<ac:parameter ac:name="linenumbers">true</ac:parameter>
<ac:plain-text-body><![CDATA[@startuml
'!includeurl https://raw.githubusercontent.com/RicardoNiepel/C4-PlantUML/master/C4_Container.puml
!include <c4/C4_Container.puml>  

'ref http://plantuml.com/stdlib
!include <office/Users/user.puml>
!include <office/Users/mobile_user.puml>

LAYOUT_WITH_LEGEND()


title Container diagram for Internet Banking System

Person(customer  , Customer , "<$user> <$mobile_user>\n A customer of the bank, with personal bank accounts" )

System_Boundary(c1, "Internet Banking") {
    Container(web_app, "Web Application", "Java, Spring MVC", "Delivers the static content and the Internet banking SPA")
    Container(spa, "Single-Page App", "JavaScript, Angular", "Provides all the Internet banking functionality to cutomers via their web browser")
    Container(mobile_app, "Mobile App", "C#, Xamarin", "Provides a limited subset of the Internet banking functionality to customers via their mobile device")
    ContainerDb(database, "Database", "SQL Database", "Stores user registraion information, hased auth credentials, access logs, etc.")
    Container(backend_api, "API Application", "Java, Docker Container", "Provides Internet banking functionality via API")
}

System_Ext(email_system, "E-Mail System", "The internal Microsoft Exchange system")
System_Ext(banking_system, "Mainframe Banking System", "Stores all of the core banking information about customers, accounts, transactions, etc.")

Rel(customer, web_app, "Uses", "HTTPS")
Rel(customer, spa, "Uses", "HTTPS")
Rel(customer, mobile_app, "Uses")

Rel_Neighbor(web_app, spa, "Delivers")
Rel(spa, backend_api, "Uses", "async, JSON/HTTPS")
Rel(mobile_app, backend_api, "Uses", "async, JSON/HTTPS")
Rel_Back_Neighbor(database, backend_api, "Reads from and writes to", "sync, JDBC")

Rel_Back(customer, email_system, "Sends e-mails to")
Rel_Back(email_system, backend_api, "Sends e-mails using", "sync, SMTP")
Rel_Neighbor(backend_api, banking_system, "Uses", "sync/async, XML/HTTPS")


@enduml
]]></ac:plain-text-body>
</ac:structured-macro>
<h3>Component</h3>
<ac:structured-macro ac:name="info">
<ac:rich-text-body>
<p>We then drill down into the “API Application” box.</p>
</ac:rich-text-body>
</ac:structured-macro>
<ac:structured-macro ac:name="info">
<ac:parameter ac:name="icon">false</ac:parameter>
<ac:rich-text-body>
<ac:image ac:align="center" ac:alt="@startuml

&apos;!includeurl https://raw.githubusercontent.com/RicardoNiepel/C4-PlantUML/master/C4_Component.puml
!include &lt;c4/C4_Component.puml&gt;  


LAYOUT_WITH_LEGEND()


title Component diagram for Internet Banking System - API Application

Container(spa, &quot;Single Page Application&quot;, &quot;javascript and angular&quot;, &quot;Provides all the internet banking functionality to customers via their web browser.&quot;)
Container(ma, &quot;Mobile App&quot;, &quot;Xamarin&quot;, &quot;Provides a limited subset ot the internet banking functionality to customers via their mobile mobile device.&quot;)
ContainerDb(db, &quot;Database&quot;, &quot;Relational Database Schema&quot;, &quot;Stores user registration information, hashed authentication credentials, access logs, etc.&quot;)
System_Ext(mbs, &quot;Mainframe Banking System&quot;, &quot;Stores all of the core banking information about customers, accounts, transactions, etc.&quot;)

Container_Boundary(api, &quot;API Application&quot;) {
    Component(sign, &quot;Sign In Controller&quot;, &quot;MVC Rest Controlle&quot;, &quot;Allows users to sign in to the internet banking system&quot;)
    Component(accounts, &quot;Accounts Summary Controller&quot;, &quot;MVC Rest Controlle&quot;, &quot;Provides customers with a summory of their bank accounts&quot;)
    Component(security, &quot;Security Component&quot;, &quot;Spring Bean&quot;, &quot;Provides functionality related to singing in, changing passwords, etc.&quot;)
    Component(mbsfacade, &quot;Mainframe Banking System Facade&quot;, &quot;Spring Bean&quot;, &quot;A facade onto the mainframe banking system.&quot;)

    Rel(sign, security, &quot;Uses&quot;)
    Rel(accounts, mbsfacade, &quot;Uses&quot;)
    Rel(security, db, &quot;Read &amp; write to&quot;, &quot;JDBC&quot;)
    Rel(mbsfacade, mbs, &quot;Uses&quot;, &quot;XML/HTTPS&quot;)
}

Rel(spa, sign, &quot;Uses&quot;, &quot;JSON/HTTPS&quot;)
Rel(spa, accounts, &quot;Uses&quot;, &quot;JSON/HTTPS&quot;)

Rel(ma, sign, &quot;Uses&quot;, &quot;JSON/HTTPS&quot;)
Rel(ma, accounts, &quot;Uses&quot;, &quot;JSON/HTTPS&quot;)
@enduml
">
<ri:attachment ri:filename="extern_plantuml-6dec8d6f56288d43906e8a05efd543faafc36b90.png"></ri:attachment>
</ac:image></ac:rich-text-body>
</ac:structured-macro>
<ac:structured-macro ac:name="code">
<ac:parameter ac:name="language">python</ac:parameter>
<ac:parameter ac:name="linenumbers">true</ac:parameter>
<ac:plain-text-body><![CDATA[@startuml

'!includeurl https://raw.githubusercontent.com/RicardoNiepel/C4-PlantUML/master/C4_Component.puml
!include <c4/C4_Component.puml>  


LAYOUT_WITH_LEGEND()


title Component diagram for Internet Banking System - API Application

Container(spa, "Single Page Application", "javascript and angular", "Provides all the internet banking functionality to customers via their web browser.")
Container(ma, "Mobile App", "Xamarin", "Provides a limited subset ot the internet banking functionality to customers via their mobile mobile device.")
ContainerDb(db, "Database", "Relational Database Schema", "Stores user registration information, hashed authentication credentials, access logs, etc.")
System_Ext(mbs, "Mainframe Banking System", "Stores all of the core banking information about customers, accounts, transactions, etc.")

Container_Boundary(api, "API Application") {
    Component(sign, "Sign In Controller", "MVC Rest Controlle", "Allows users to sign in to the internet banking system")
    Component(accounts, "Accounts Summary Controller", "MVC Rest Controlle", "Provides customers with a summory of their bank accounts")
    Component(security, "Security Component", "Spring Bean", "Provides functionality related to singing in, changing passwords, etc.")
    Component(mbsfacade, "Mainframe Banking System Facade", "Spring Bean", "A facade onto the mainframe banking system.")

    Rel(sign, security, "Uses")
    Rel(accounts, mbsfacade, "Uses")
    Rel(security, db, "Read & write to", "JDBC")
    Rel(mbsfacade, mbs, "Uses", "XML/HTTPS")
}

Rel(spa, sign, "Uses", "JSON/HTTPS")
Rel(spa, accounts, "Uses", "JSON/HTTPS")

Rel(ma, sign, "Uses", "JSON/HTTPS")
Rel(ma, accounts, "Uses", "JSON/HTTPS")
@enduml]]></ac:plain-text-body>
</ac:structured-macro>
<h3>Class</h3>
<ac:structured-macro ac:name="info">
<ac:rich-text-body>
<p>We could then add the Class diagrams for the different Components.</p>
</ac:rich-text-body>
</ac:structured-macro>
