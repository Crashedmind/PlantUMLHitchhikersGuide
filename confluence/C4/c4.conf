<h2>Introduction</h2>
<p>The <a href="https://c4model.com/">C4 Model</a> is a lightweight software
architecture description method. It consists of a set of 4 diagrams that
describe the <strong>static</strong> structure of a software system.</p>
<p>Overall, it strives for clarity and communication of the story, and
follows <a href="http://www.ifp.illinois.edu/nabhcs/abstracts/shneiderman.html">Shneiderman’s
mantra</a>:</p>
<div style="margin-left: 30px;padding-top: 10px;">
<p><em>Overview first, zoom and filter, then details-on-demand</em></p>
</div>
<p>It is not formal UML e.g. the UML actor stickman is deliberately not
used as it causes confusion between a person or a system.</p>
<ac:structured-macro ac:name="info">
<ac:parameter ac:name="icon">false</ac:parameter>
<ac:rich-text-body>
<ac:image ac:align="default">
<ri:attachment ri:filename="C4_c4.png"></ri:attachment>
</ac:image><p>The 4 C’s</p>
</ac:rich-text-body>
</ac:structured-macro>
<table>
<thead>
<tr>
<th><p>The <strong>4C’s</strong></p>
</th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td><p><strong>Context</strong></p>
</td>
<td><p>A high-level diagram that sets the scene; including key system dependencies and people (actors/roles/personas/etc). <a href="https://en.wikipedia.org/wiki/System_context_diagram">Context diagrams</a> are standard in software engineering (even if not used often).</p>
</td>
</tr>
<tr>
<td><p><strong>Container</strong></p>
</td>
<td><p>A container diagram shows the high-level technology choices, how responsibilities are distributed across them and how the containers communicate.</p>
</td>
</tr>
<tr>
<td><p><strong>Component</strong></p>
</td>
<td><p>For each container, a component diagram lets you see the key logical components and their relationships. 4.</p>
</td>
</tr>
<tr>
<td><p><strong>Classes (or Code)</strong></p>
</td>
<td><p>This is optional and is the lowest level of detail.</p>
</td>
</tr>
</tbody>
</table>
<h2>CheatSheet</h2>
<p>The
<a href="http://www.codingthearchitecture.com/2017/04/27/visualising_and_documenting_software_architecture_cheat_sheets.html">CheatSheet</a>
gives a good summary of the C4 model and diagrams.</p>
<h2>Video Presentation</h2>
<p>See <a href="https://www.youtube.com/watch?v=Ym9nhVZs89o">youtube video from NDC2017
conference</a> by Simon
Brown on C4 for visualisation.</p>
<h2>Related Methods</h2>
<p>There are a number of related models and templates:</p>
<h3>4+1 model</h3>
<p>C4 is inspired by <a href="https://en.wikipedia.org/wiki/4%2B1_architectural_view_model">the 4+1 model for software
architecture</a></p>
<h3>ARC42</h3>
<p>C4 can be combined with arc42 documentation template. The diagrams map
as follows:</p>
<table>
<thead>
<tr>
<th><p>Arc42</p>
</th>
<th><p>C4</p>
</th>
</tr>
</thead>
<tbody>
<tr>
<td><p>Context and Scope</p>
</td>
<td><p>System Context diagram</p>
</td>
</tr>
<tr>
<td><p>Building Block View (level 1)</p>
</td>
<td><p>Container diagram</p>
</td>
</tr>
<tr>
<td><p>Building Block View (level 2)</p>
</td>
<td><p>Component diagram</p>
</td>
</tr>
<tr>
<td><p>Building Block View (level 3)</p>
</td>
<td><p>Class diagram</p>
</td>
</tr>
</tbody>
</table>
<h3>Data-flow diagrams</h3>
<p><a href="https://en.wikipedia.org/wiki/Data-flow_diagram">Data-flow diagrams
(DFD)</a> (to describe
data <strong>activity</strong>) use a similar hierarchical approach starting with the
contextual DFD0. They use a multi-level numbering scheme - DFD0: 1 -
DFD1: 1.1., 1.2, - DFD2: 1.1.1, 1.1.2,</p>
<h3>Books</h3>
<p>These books, written by [@simonbrown](<a href="https://twitter.com/simonbrown">https://twitter.com/simonbrown</a>),
are available to buy from
<a href="https://leanpub.com/visualising-software-architecture">https://leanpub.com/visualising-software-architecture</a>.</p>
<p><ac:image ac:alt="Book1">
<ri:attachment ri:filename="C4_swarchv1.png"></ri:attachment>
</ac:image>  <ac:image ac:alt="Book2">
<ri:attachment ri:filename="C4_swarchv2.png"></ri:attachment>
</ac:image></p>
